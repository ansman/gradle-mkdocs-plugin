{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to gradle-mkdocs-plugin \u00b6 Mkdocs (python tool) documentation generation and publishing plugin Release notes - License Ideal for open source projects \u00b6 Easy start: initial docs source generation Markdown syntax (with handy extensions) Great look from material theme (used by default) with extra features: Mobile friendly Embedded search Syntax highlighting Easy documentation contribution (jump to source directly from doc) Multi-version documentation publishing to github pages Variables support Example usages: \u00b6 dropwizard-guicey gradle-quality-plugin","title":"Home"},{"location":"#welcome-to-gradle-mkdocs-plugin","text":"Mkdocs (python tool) documentation generation and publishing plugin Release notes - License","title":"Welcome to gradle-mkdocs-plugin"},{"location":"#ideal-for-open-source-projects","text":"Easy start: initial docs source generation Markdown syntax (with handy extensions) Great look from material theme (used by default) with extra features: Mobile friendly Embedded search Syntax highlighting Easy documentation contribution (jump to source directly from doc) Multi-version documentation publishing to github pages Variables support","title":"Ideal for open source projects"},{"location":"#example-usages","text":"dropwizard-guicey gradle-quality-plugin","title":"Example usages:"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Releases are published to bintray jcenter , maven central and gradle plugins portal . buildscript { repositories { mavenCentral () } dependencies { classpath 'ru.vyarus:gradle-mkdocs-plugin:2.1.0' } } apply plugin: 'ru.vyarus.mkdocs' OR plugins { id 'ru.vyarus.mkdocs' version '2.1.0' } Python \u00b6 Requires installed python 2.7 or 3.6 and above with pip. Check and install python if required . Note Plugin will not affect global python: it will create project-specific virtualenv (in .gradle/python ) and install all required (pip) modules there. This will grant build reproduction (once initialized virtualenv used for all future executions). Tip It is completely normal to manually remove virtualenv folder ( .gradle/python ) in case of problems to re-create environment. Usage \u00b6 By default, documentation source assumed to be in src/doc . Tip Default location could be changed: mkdocs.sourcesDir = 'docs' Call mkdocsInit task to generate initial site version (into src/doc by default): src/doc/ docs/ - documentation source ... index.md mkdocs.yml - site configuration Note Plugin does not use mkdocs new command for site generation: custom template used with pre-configured plugins and enabled material theme. Call mkdocsServe task to start live reload server to see default site: http://127.0.0.1:8000/ . Tip Used port may be changed in mkdocs.yml with dev_addr : dev_addr : 127.0.0.1:3000 Warning Python process will not be killed after you stop gradle execution (search and kill python process manually). This is a known gradle problem and the only known workaround is to start task without daemon: gradlew mkdocsServe --no-daemon . Another alternative is to start serve command directly: copy console command from task execution log and use it directly. Initial site configuration \u00b6 Open generated mkdocs config file src/doc/mkdocs.yml . It contains many commented options: Commented option Recommendation site_author fill with you name or remove (appear in meta tags only) site_url Set to documentation root url (gh-pages url). Used as meta tag, as a link on the home icon and inside generated sitemap.xml. NOTE plugin will automatically modify url to point to correct published folder (when multi-version publication used). Repository link on each page (right top corner) repo_name Source repository link text (by default set to project name) repo_url Repository url (Github or Bitbucket) edit_uri Path to documentation source in the source repository (required for \"edit page\" (pencil icon) link) Copyright copyright Shown below each page For material theme configuration see: configuration docs . Note that most useful material theme extensions are already enabled (see markdown_extensions section). Writing \u00b6 Yaml configuration nav section declares your documentation structure. Pages inside docs folder may be structured as you want. To add new page simply add new markdown file (page.md) and add reference to it in nav config section. Note All changes are immediately appeared in the started live reload server ( mkdocsServe ) You can use gradle-driven variables , for example, to insert project version in docs. Read: Mkdocs getting started guide . Mkdocs-material extensions docs . Tip If you want to use a different theme (not material) then you'll need to configure it Building \u00b6 Warning You will need to stop livereload server in order to build By default, mkdocsBuild task will generate (suppose project version is '1.0-SNAPSHOT'): build/mkdocs/ /1.0-SNAPSHOT/ - mkdocs site index.html - redirect to correct site Plugin is configured for multi-version documentation publishing: each version is in it's own folder and special index.html at the root will redirect to the latest version (when published). Everything in build/mkdocs/ is assumed to be published into github pages (preserving all other already published folders). Default configuration: mkdocs . publish { docPath = '$version' rootRedirect = true } As documentation is often updated for already released version, it makes sense to define current version manually (or define it when you need to publish to exact version): mkdocs . publish . docPath = '1.0' Tip See multi-version section for how to publish older docs version Single version site \u00b6 If you don't want to use multi-version support at all then: mkdocs.publish.docPath = '' // or null This way, mkdocs site will always be published at the root (in case of publish it will always replace previous site version). Publication \u00b6 When documentation site will be ready, you will need to call mkdocksPublish in order to publish it to github pages (default). If your repo is https://github.com/me/my-project then documentation will be available as https://me.github.io/my-project/ . Published index.html at the root will immediately redirect you to the actual version: https://me.github.io/my-project/1.0.0/ . See more about publication customization in publication section. It also describes how to publish additional parts with documentation site (like javadoc). Pip \u00b6 See pip section if you need to change mkdocs version, use custom theme or plugin.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Releases are published to bintray jcenter , maven central and gradle plugins portal . buildscript { repositories { mavenCentral () } dependencies { classpath 'ru.vyarus:gradle-mkdocs-plugin:2.1.0' } } apply plugin: 'ru.vyarus.mkdocs' OR plugins { id 'ru.vyarus.mkdocs' version '2.1.0' }","title":"Installation"},{"location":"getting-started/#python","text":"Requires installed python 2.7 or 3.6 and above with pip. Check and install python if required . Note Plugin will not affect global python: it will create project-specific virtualenv (in .gradle/python ) and install all required (pip) modules there. This will grant build reproduction (once initialized virtualenv used for all future executions). Tip It is completely normal to manually remove virtualenv folder ( .gradle/python ) in case of problems to re-create environment.","title":"Python"},{"location":"getting-started/#usage","text":"By default, documentation source assumed to be in src/doc . Tip Default location could be changed: mkdocs.sourcesDir = 'docs' Call mkdocsInit task to generate initial site version (into src/doc by default): src/doc/ docs/ - documentation source ... index.md mkdocs.yml - site configuration Note Plugin does not use mkdocs new command for site generation: custom template used with pre-configured plugins and enabled material theme. Call mkdocsServe task to start live reload server to see default site: http://127.0.0.1:8000/ . Tip Used port may be changed in mkdocs.yml with dev_addr : dev_addr : 127.0.0.1:3000 Warning Python process will not be killed after you stop gradle execution (search and kill python process manually). This is a known gradle problem and the only known workaround is to start task without daemon: gradlew mkdocsServe --no-daemon . Another alternative is to start serve command directly: copy console command from task execution log and use it directly.","title":"Usage"},{"location":"getting-started/#initial-site-configuration","text":"Open generated mkdocs config file src/doc/mkdocs.yml . It contains many commented options: Commented option Recommendation site_author fill with you name or remove (appear in meta tags only) site_url Set to documentation root url (gh-pages url). Used as meta tag, as a link on the home icon and inside generated sitemap.xml. NOTE plugin will automatically modify url to point to correct published folder (when multi-version publication used). Repository link on each page (right top corner) repo_name Source repository link text (by default set to project name) repo_url Repository url (Github or Bitbucket) edit_uri Path to documentation source in the source repository (required for \"edit page\" (pencil icon) link) Copyright copyright Shown below each page For material theme configuration see: configuration docs . Note that most useful material theme extensions are already enabled (see markdown_extensions section).","title":"Initial site configuration"},{"location":"getting-started/#writing","text":"Yaml configuration nav section declares your documentation structure. Pages inside docs folder may be structured as you want. To add new page simply add new markdown file (page.md) and add reference to it in nav config section. Note All changes are immediately appeared in the started live reload server ( mkdocsServe ) You can use gradle-driven variables , for example, to insert project version in docs. Read: Mkdocs getting started guide . Mkdocs-material extensions docs . Tip If you want to use a different theme (not material) then you'll need to configure it","title":"Writing"},{"location":"getting-started/#building","text":"Warning You will need to stop livereload server in order to build By default, mkdocsBuild task will generate (suppose project version is '1.0-SNAPSHOT'): build/mkdocs/ /1.0-SNAPSHOT/ - mkdocs site index.html - redirect to correct site Plugin is configured for multi-version documentation publishing: each version is in it's own folder and special index.html at the root will redirect to the latest version (when published). Everything in build/mkdocs/ is assumed to be published into github pages (preserving all other already published folders). Default configuration: mkdocs . publish { docPath = '$version' rootRedirect = true } As documentation is often updated for already released version, it makes sense to define current version manually (or define it when you need to publish to exact version): mkdocs . publish . docPath = '1.0' Tip See multi-version section for how to publish older docs version","title":"Building"},{"location":"getting-started/#single-version-site","text":"If you don't want to use multi-version support at all then: mkdocs.publish.docPath = '' // or null This way, mkdocs site will always be published at the root (in case of publish it will always replace previous site version).","title":"Single version site"},{"location":"getting-started/#publication","text":"When documentation site will be ready, you will need to call mkdocksPublish in order to publish it to github pages (default). If your repo is https://github.com/me/my-project then documentation will be available as https://me.github.io/my-project/ . Published index.html at the root will immediately redirect you to the actual version: https://me.github.io/my-project/1.0.0/ . See more about publication customization in publication section. It also describes how to publish additional parts with documentation site (like javadoc).","title":"Publication"},{"location":"getting-started/#pip","text":"See pip section if you need to change mkdocs version, use custom theme or plugin.","title":"Pip"},{"location":"about/history/","text":"2.1.0 (2021-03-17) \u00b6 Support python installed from Windows Store (use-python-plugin 2.3.0) Update packages: mkdocs 1.1 -> 1.1.2 mkdocs-material 4.6.3 -> 7.0.6 pygments 2.6.1 -> 2.8.0 pymdown-extensions 6.3.0 -> 8.1.1 Optional variables support for all mkdocs tasks: there is no (and not planned) native support for variables in mkdocs, but often it is very handful. It is only possible to have it with a plugin. ( #7 ) Added mkdocs-markdownextradata-plugin 0.2.4 as installed module (no harm, you must active it manually!) Added mkdocs.extras configuration option: map to declare additional variables When extra variables declared, plugin would generate a special file, containing all declared variables, which markdownextradata plugin would recognize and use automatically. Variables must be used with 'gradle' prefix: {{ gradle.declared_var_name }} WARNING: there were some scheme changes in mkdocs-material. Most likely you may face social links change: Before: social: - type: github link: https://github.com/xvik After: social: - icon: fontawesome/brands/github link: https://github.com/xvik See mkdocs-material upgrade guide for details 2.0.1 (2020-04-06) \u00b6 Fix relative virtualenv paths support (don't rely on gradle work dir) (#5) 2.0.0 (2020-03-13) \u00b6 (breaking) Drop java 7 support (breaking) Drop gradle 4 support Fix jgit dependency conflict (#4) (plugin now use jgit 5) Update packages: mkdocs 1.0.4 -> 1.1 mkdocs-material 3.0.4 -> 4.6.3 pygments 2.2.0 -> 2.6.1 pymdown-extensions 6.0.0 -> 6.3.0 Use gradle tasks configuration avoidance for lazy tasks initialization (no init when tasks not needed) 1.1.0 (2018-10-14) \u00b6 Default template's mkdocs.yml changes: fixed edit_uri (missed \"/docs\" ending) pages changed to nav change parameters syntax in markdown_extensions section Fix documentation in sub module support (use-python plugin 1.2.0) Support Mkdocks 1.0: Update default mkdocs 0.17.3 -> 1.0.4 Update default mkdocs-material 2.7.2 -> 3.0.4 Update default pymdown-extensions 4.9.2 -> 6.0.0 Mkdocs 1.0 migration notes (for existing docs): Rename pages section into nav Make sure site_url set correctly (otherwise sitemap will contain None instead of urls) Change markdown_extensions section from using something(arg=val) syntax into: markdown_extensions : - admonition - codehilite : guess_lang : false - footnotes - meta - toc : permalink : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.smartsymbols - pymdownx.superfences 1.0.1 (2018-04-23) \u00b6 Fix pip 10 compatibility (use-python plugin 1.0.2) Update default mkdocs 0.17.2 -> 0.17.3 Update default mkdocs-material 2.2.1 -> 2.7.2 Update default pymdown-extensions 4.6 -> 4.9.2 1.0.0 (2017-12-30) \u00b6 Initial release","title":"Release notes"},{"location":"about/history/#210-2021-03-17","text":"Support python installed from Windows Store (use-python-plugin 2.3.0) Update packages: mkdocs 1.1 -> 1.1.2 mkdocs-material 4.6.3 -> 7.0.6 pygments 2.6.1 -> 2.8.0 pymdown-extensions 6.3.0 -> 8.1.1 Optional variables support for all mkdocs tasks: there is no (and not planned) native support for variables in mkdocs, but often it is very handful. It is only possible to have it with a plugin. ( #7 ) Added mkdocs-markdownextradata-plugin 0.2.4 as installed module (no harm, you must active it manually!) Added mkdocs.extras configuration option: map to declare additional variables When extra variables declared, plugin would generate a special file, containing all declared variables, which markdownextradata plugin would recognize and use automatically. Variables must be used with 'gradle' prefix: {{ gradle.declared_var_name }} WARNING: there were some scheme changes in mkdocs-material. Most likely you may face social links change: Before: social: - type: github link: https://github.com/xvik After: social: - icon: fontawesome/brands/github link: https://github.com/xvik See mkdocs-material upgrade guide for details","title":"2.1.0 (2021-03-17)"},{"location":"about/history/#201-2020-04-06","text":"Fix relative virtualenv paths support (don't rely on gradle work dir) (#5)","title":"2.0.1 (2020-04-06)"},{"location":"about/history/#200-2020-03-13","text":"(breaking) Drop java 7 support (breaking) Drop gradle 4 support Fix jgit dependency conflict (#4) (plugin now use jgit 5) Update packages: mkdocs 1.0.4 -> 1.1 mkdocs-material 3.0.4 -> 4.6.3 pygments 2.2.0 -> 2.6.1 pymdown-extensions 6.0.0 -> 6.3.0 Use gradle tasks configuration avoidance for lazy tasks initialization (no init when tasks not needed)","title":"2.0.0 (2020-03-13)"},{"location":"about/history/#110-2018-10-14","text":"Default template's mkdocs.yml changes: fixed edit_uri (missed \"/docs\" ending) pages changed to nav change parameters syntax in markdown_extensions section Fix documentation in sub module support (use-python plugin 1.2.0) Support Mkdocks 1.0: Update default mkdocs 0.17.3 -> 1.0.4 Update default mkdocs-material 2.7.2 -> 3.0.4 Update default pymdown-extensions 4.9.2 -> 6.0.0 Mkdocs 1.0 migration notes (for existing docs): Rename pages section into nav Make sure site_url set correctly (otherwise sitemap will contain None instead of urls) Change markdown_extensions section from using something(arg=val) syntax into: markdown_extensions : - admonition - codehilite : guess_lang : false - footnotes - meta - toc : permalink : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.smartsymbols - pymdownx.superfences","title":"1.1.0 (2018-10-14)"},{"location":"about/history/#101-2018-04-23","text":"Fix pip 10 compatibility (use-python plugin 1.0.2) Update default mkdocs 0.17.2 -> 0.17.3 Update default mkdocs-material 2.2.1 -> 2.7.2 Update default pymdown-extensions 4.6 -> 4.9.2","title":"1.0.1 (2018-04-23)"},{"location":"about/history/#100-2017-12-30","text":"Initial release","title":"1.0.0 (2017-12-30)"},{"location":"about/license/","text":"The MIT License (MIT) Copyright \u00a9 2017-2021, Vyacheslav Rusakov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"guide/configuration/","text":"Configuration \u00b6 Configuration properties with default values: mkdocs { // mkdocs sources sourcesDir = 'src/doc' // strict build (fail on build errors) strict = true // target build directory (publication root) buildDir = 'build/mkdocs' // automatically update site_url in mkdocs.yml before mkdocsBuild updateSiteUrl = true // optional variables declaration (to bypass gradle data to docs) extras = [:] publish { // publication sub-folder (by default project version) docPath = '$version' // generate index.html' for root redirection to the last published version rootRedirect = true // publish repository uri (bu default the same as current repository) repoUri = null // publication branch branch = 'gh-pages' // publication comment comment = 'Publish $docPath documentation' // directory publication repository checkout, update and push repoDir = '.gradle/gh-pages' } } By default: All documentation sources located in src/doc (and mkdocsInit task generate stubs there) mkdocsBuild task will build site into build/mkdocs Current project version is used as documentation folder ( build/mkdocs/$version ) Github repository is assumed by default, so publication will be performed into gh-pages branch (where github will automatically detect it) Variables plugin is not configured. See variables section for details. Note In order to include something else into published docks (e.g. javadoc) see publication . Single version site \u00b6 If you don't want to use multi-version support at all then: mkdocs.publish.docPath = '' // or null This way, mkdocs site will always be published at the root (in case of publish it will always replace previous site version). Docs as module \u00b6 Example of moving documentation into separate gradle module: plugins { id 'ru.vyarus.mkdocs' version '2.1.0' apply false } version = '1.0-SNAPSHOT' project ( ':doc' ) { apply plugin: 'ru.vyarus.mkdocs' mkdocs { sourcesDir = 'src' } } Default docs location simplified to simple src because of no other sources in this module. If we call :doc:mkdocsInit it will generate documentation stubs like this: Project structure: / /doc/ src/ docs/ ... index.md mkdocs.yaml build.gradle settings.gradle For simplicity, gradle configuration for doc module is declared in the main file, but it could be declared inside doc's own build.gradle.","title":"Configuration"},{"location":"guide/configuration/#configuration","text":"Configuration properties with default values: mkdocs { // mkdocs sources sourcesDir = 'src/doc' // strict build (fail on build errors) strict = true // target build directory (publication root) buildDir = 'build/mkdocs' // automatically update site_url in mkdocs.yml before mkdocsBuild updateSiteUrl = true // optional variables declaration (to bypass gradle data to docs) extras = [:] publish { // publication sub-folder (by default project version) docPath = '$version' // generate index.html' for root redirection to the last published version rootRedirect = true // publish repository uri (bu default the same as current repository) repoUri = null // publication branch branch = 'gh-pages' // publication comment comment = 'Publish $docPath documentation' // directory publication repository checkout, update and push repoDir = '.gradle/gh-pages' } } By default: All documentation sources located in src/doc (and mkdocsInit task generate stubs there) mkdocsBuild task will build site into build/mkdocs Current project version is used as documentation folder ( build/mkdocs/$version ) Github repository is assumed by default, so publication will be performed into gh-pages branch (where github will automatically detect it) Variables plugin is not configured. See variables section for details. Note In order to include something else into published docks (e.g. javadoc) see publication .","title":"Configuration"},{"location":"guide/configuration/#single-version-site","text":"If you don't want to use multi-version support at all then: mkdocs.publish.docPath = '' // or null This way, mkdocs site will always be published at the root (in case of publish it will always replace previous site version).","title":"Single version site"},{"location":"guide/configuration/#docs-as-module","text":"Example of moving documentation into separate gradle module: plugins { id 'ru.vyarus.mkdocs' version '2.1.0' apply false } version = '1.0-SNAPSHOT' project ( ':doc' ) { apply plugin: 'ru.vyarus.mkdocs' mkdocs { sourcesDir = 'src' } } Default docs location simplified to simple src because of no other sources in this module. If we call :doc:mkdocsInit it will generate documentation stubs like this: Project structure: / /doc/ src/ docs/ ... index.md mkdocs.yaml build.gradle settings.gradle For simplicity, gradle configuration for doc module is declared in the main file, but it could be declared inside doc's own build.gradle.","title":"Docs as module"},{"location":"guide/multi-version/","text":"Multi-version documentation \u00b6 By default, plugin assume multi-version documentation publishing. Configuration, responsible for versioning: mkdocs . publish { docPath = '$version' rootRedirect = true } Tip Usually it is more handy to manually set current doc version and not rely on project version because often documentation for currently released version is updated multiple times after release. Workflow \u00b6 Usually you work on documentation for current version only. When new version released - you publish new documentation version and continue evolving it. Old version stays published for the legacy users. Older version update \u00b6 When older documentation version needs to be updated switch off redirection index.html generation (so it would not override redirection to the latest version): mkdocs . publish { docPath = '0.9' rootRedirect = false // site root must still redirect to '1.0' (assume it's already published) } Will build (without root index.html): build/mkdocs/ /0.9/ - mkdocs site for old version Publication layouts \u00b6 You may define whatever layout you want, e.g.: mkdocs.publish.docPath = 'en/1.0/' Here generated site will be published into /en/1.0/ folder (not just version) and index.html generated at the root with correct redirection.","title":"Multi-version"},{"location":"guide/multi-version/#multi-version-documentation","text":"By default, plugin assume multi-version documentation publishing. Configuration, responsible for versioning: mkdocs . publish { docPath = '$version' rootRedirect = true } Tip Usually it is more handy to manually set current doc version and not rely on project version because often documentation for currently released version is updated multiple times after release.","title":"Multi-version documentation"},{"location":"guide/multi-version/#workflow","text":"Usually you work on documentation for current version only. When new version released - you publish new documentation version and continue evolving it. Old version stays published for the legacy users.","title":"Workflow"},{"location":"guide/multi-version/#older-version-update","text":"When older documentation version needs to be updated switch off redirection index.html generation (so it would not override redirection to the latest version): mkdocs . publish { docPath = '0.9' rootRedirect = false // site root must still redirect to '1.0' (assume it's already published) } Will build (without root index.html): build/mkdocs/ /0.9/ - mkdocs site for old version","title":"Older version update"},{"location":"guide/multi-version/#publication-layouts","text":"You may define whatever layout you want, e.g.: mkdocs.publish.docPath = 'en/1.0/' Here generated site will be published into /en/1.0/ folder (not just version) and index.html generated at the root with correct redirection.","title":"Publication layouts"},{"location":"guide/pip/","text":"Pip modules \u00b6 Plugin will install by default the following pip modules: mkdocs:1.1.2 mkdocs-material:7.0.6 pygments:2.8.0 pymdown-extensions:8.1.1 mkdocs-markdownextradata-plugin:0.2.4 By default, modules are installed into project specific virtualenv (located in .gradle/python ). You can see all installed modules with pipList task. If you want to use other python modules (e.g. other theme): python . pip 'other-module:12' , 'and-other:1.0' Also, you can override default modules versions: python . pip 'mkdocs:1.1' And even downgrade: python . pip 'mkdocs:1.0.3' You can use pipUpdates task to check if newer module versions are available .","title":"Pip"},{"location":"guide/pip/#pip-modules","text":"Plugin will install by default the following pip modules: mkdocs:1.1.2 mkdocs-material:7.0.6 pygments:2.8.0 pymdown-extensions:8.1.1 mkdocs-markdownextradata-plugin:0.2.4 By default, modules are installed into project specific virtualenv (located in .gradle/python ). You can see all installed modules with pipList task. If you want to use other python modules (e.g. other theme): python . pip 'other-module:12' , 'and-other:1.0' Also, you can override default modules versions: python . pip 'mkdocs:1.1' And even downgrade: python . pip 'mkdocs:1.0.3' You can use pipUpdates task to check if newer module versions are available .","title":"Pip modules"},{"location":"guide/publication/","text":"Publication \u00b6 Note Plugin does not use mkdocs publication , because it does not support multi-versioning. Instead, git-publish plugin is used for publication. By default, no configuration is required. Only project itself must be published to git so that plugin could calculate default url (or mkdocs.publish.repoUrl manually specified). On the first mkdocsPublish task call: gh-pages branch will be created in the same repo built site pushed to gh-pages repository branch Later mkdocsPublish task calls will only remove current version folder (replace with the new one) or publish completely new version only. You can find actual gh-pages branch inside .gradle/gh-pages (this checkout is used for publishing). Gradle folder is used to cache repository checkout because eventually it would contain many versions and there is no need to checkout all of them each time (folder could be changed with mkdocs.publish.repoDir ). Authentication \u00b6 By default, git-publish will ask credentials with a popup (swing). Even if github pages are published on the same repo, the repo is checked out into different folder and so current repository credentials can't be used automatically. You can specify credentials as: Environment variables: GRGIT_USER (could be github token ), GRGIT_PASS System properties: org.ajoberstar.grgit.auth.username (could be github token), org.ajoberstar.grgit.auth.password Ssh key properties: org.ajoberstar.grgit.auth.ssh.private (path to key), org.ajoberstar.grgit.auth.ssh.passphrase See details in grgit docs . Plugin will automatically bind gradle properties org.ajoberstar.grgit.auth.* to system properties (just before gitPublishReset ). This allows you to define credentials as global gradle properties in ~/.gradle/gradle.properties : org.ajoberstar.grgit.auth.username = user org.ajoberstar.grgit.auth.password = pass For testing, you can define properties inside gradle script: ext [ 'org.ajoberstar.grgit.auth.username' ] = 'user' ext [ 'org.ajoberstar.grgit.auth.password' ] = 'pass' Publish additional resources \u00b6 If you want to publish not only generated site, but something else too then configure git-publish plugin to include additional content. For example, to include javadoc: gitPublish . contents { from ( javadoc ) { // need to use resolveDocPath because by default it's a template into \"\\${mkdocs.resolveDocPath()}/javadoc\" } } // dependency will NOT be set automatically by copySpec above gitPublishReset . dependsOn javadoc With this configuration, calling mkdocsPublish will publish generated mkdocs site with extra javadoc folder inside (you can put relative link to it inside documentation). Advanced publishing configuration \u00b6 To be able to configure advanced cases, you need to understand how everything works in detail. Here is how git-publish plugin is configured by default: gitPublish { repoUri = mkdocs . publish . repoUri branch = mkdocs . publish . branch repoDir = file ( mkdocs . publish . repoDir ) commitMessage = mkdocs . publish . comment contents { from ( \"${mkdocs.buildDir}\" ) } if ( multi_version_publish ) { preserve { include '**' exclude \"${mkdocs.publish.docPath}/**\" } } } Customized tasks dependency chain: mkdocsBuild <- gitPublishReset <- gitPublishCopy <- gitPublishCommit <- gitPublishPush <- mkdocsPublish Publication process: mkdocsBuild build site into $mkdocs.buildDir/$mkdocs.publish.docPath (by default, build/mkdocs/$version/ ) root redirect index.html generated (by default, build/mkdocs/index.html ) gitPublishReset clones gh-pages repo (by default, into .gradle/gh-pages ) or creates new one cleanup repo according to gitPublish.preserve (by default, .gradle/gh-pages/$version/ folder removed only) gitPublishCopy copies everything according to gitPublish.contents (by default, everything from build/mkdocs ) gitPublishCommit , gitPublishPush - commit changes and push to gh-pages repository (by default, gh-pages branch in current repo) You can configure additional folders for publication with contents (as shown above with javadoc) and cleanup extra directories with preserve configuration. For example: gitPublish { contents { from 'build/custom-dir' { into 'custom-dir' } } preserve { exclude 'custom-dir' } } Here extra build/custom-dir directory added for publication (into custom-dir ) and previous custom-dir folder (already committed) will be removed before publication. site_url \u00b6 site_url configuration defined in mkdocs.yml should point to the site root. It may be github pages or some custom domain. Setting affect home icon link, page metadata and links in generated sitemap.xml. When multi-version publishing used (by default), this url must point to documentation version folder (otherwise links will be incorrect in the sitemap). To avoid manual changes, just configure root site url (e.g. http://myroot.com/ ) and plugin will automatically change site_url before mkdocsBuild (for example, to http://myroot.com/1.0/ ; see build log - it will show updated url). Config is reverted back after the task, so you will not have to commit or revert changes. If site_url option is not defined at all (or multi-version publishing is not enabled) then config will not be changed. You can disable automatic configuration changes: mkdocs . updateSiteUrl = false Note that mkdocsServe is not affected (will generate with the original site_url) because it is not important for documentation writing (you can always call mkdocsBuild and validate urls correctness).","title":"Publication"},{"location":"guide/publication/#publication","text":"Note Plugin does not use mkdocs publication , because it does not support multi-versioning. Instead, git-publish plugin is used for publication. By default, no configuration is required. Only project itself must be published to git so that plugin could calculate default url (or mkdocs.publish.repoUrl manually specified). On the first mkdocsPublish task call: gh-pages branch will be created in the same repo built site pushed to gh-pages repository branch Later mkdocsPublish task calls will only remove current version folder (replace with the new one) or publish completely new version only. You can find actual gh-pages branch inside .gradle/gh-pages (this checkout is used for publishing). Gradle folder is used to cache repository checkout because eventually it would contain many versions and there is no need to checkout all of them each time (folder could be changed with mkdocs.publish.repoDir ).","title":"Publication"},{"location":"guide/publication/#authentication","text":"By default, git-publish will ask credentials with a popup (swing). Even if github pages are published on the same repo, the repo is checked out into different folder and so current repository credentials can't be used automatically. You can specify credentials as: Environment variables: GRGIT_USER (could be github token ), GRGIT_PASS System properties: org.ajoberstar.grgit.auth.username (could be github token), org.ajoberstar.grgit.auth.password Ssh key properties: org.ajoberstar.grgit.auth.ssh.private (path to key), org.ajoberstar.grgit.auth.ssh.passphrase See details in grgit docs . Plugin will automatically bind gradle properties org.ajoberstar.grgit.auth.* to system properties (just before gitPublishReset ). This allows you to define credentials as global gradle properties in ~/.gradle/gradle.properties : org.ajoberstar.grgit.auth.username = user org.ajoberstar.grgit.auth.password = pass For testing, you can define properties inside gradle script: ext [ 'org.ajoberstar.grgit.auth.username' ] = 'user' ext [ 'org.ajoberstar.grgit.auth.password' ] = 'pass'","title":"Authentication"},{"location":"guide/publication/#publish-additional-resources","text":"If you want to publish not only generated site, but something else too then configure git-publish plugin to include additional content. For example, to include javadoc: gitPublish . contents { from ( javadoc ) { // need to use resolveDocPath because by default it's a template into \"\\${mkdocs.resolveDocPath()}/javadoc\" } } // dependency will NOT be set automatically by copySpec above gitPublishReset . dependsOn javadoc With this configuration, calling mkdocsPublish will publish generated mkdocs site with extra javadoc folder inside (you can put relative link to it inside documentation).","title":"Publish additional resources"},{"location":"guide/publication/#advanced-publishing-configuration","text":"To be able to configure advanced cases, you need to understand how everything works in detail. Here is how git-publish plugin is configured by default: gitPublish { repoUri = mkdocs . publish . repoUri branch = mkdocs . publish . branch repoDir = file ( mkdocs . publish . repoDir ) commitMessage = mkdocs . publish . comment contents { from ( \"${mkdocs.buildDir}\" ) } if ( multi_version_publish ) { preserve { include '**' exclude \"${mkdocs.publish.docPath}/**\" } } } Customized tasks dependency chain: mkdocsBuild <- gitPublishReset <- gitPublishCopy <- gitPublishCommit <- gitPublishPush <- mkdocsPublish Publication process: mkdocsBuild build site into $mkdocs.buildDir/$mkdocs.publish.docPath (by default, build/mkdocs/$version/ ) root redirect index.html generated (by default, build/mkdocs/index.html ) gitPublishReset clones gh-pages repo (by default, into .gradle/gh-pages ) or creates new one cleanup repo according to gitPublish.preserve (by default, .gradle/gh-pages/$version/ folder removed only) gitPublishCopy copies everything according to gitPublish.contents (by default, everything from build/mkdocs ) gitPublishCommit , gitPublishPush - commit changes and push to gh-pages repository (by default, gh-pages branch in current repo) You can configure additional folders for publication with contents (as shown above with javadoc) and cleanup extra directories with preserve configuration. For example: gitPublish { contents { from 'build/custom-dir' { into 'custom-dir' } } preserve { exclude 'custom-dir' } } Here extra build/custom-dir directory added for publication (into custom-dir ) and previous custom-dir folder (already committed) will be removed before publication.","title":"Advanced publishing configuration"},{"location":"guide/publication/#site_url","text":"site_url configuration defined in mkdocs.yml should point to the site root. It may be github pages or some custom domain. Setting affect home icon link, page metadata and links in generated sitemap.xml. When multi-version publishing used (by default), this url must point to documentation version folder (otherwise links will be incorrect in the sitemap). To avoid manual changes, just configure root site url (e.g. http://myroot.com/ ) and plugin will automatically change site_url before mkdocsBuild (for example, to http://myroot.com/1.0/ ; see build log - it will show updated url). Config is reverted back after the task, so you will not have to commit or revert changes. If site_url option is not defined at all (or multi-version publishing is not enabled) then config will not be changed. You can disable automatic configuration changes: mkdocs . updateSiteUrl = false Note that mkdocsServe is not affected (will generate with the original site_url) because it is not important for documentation writing (you can always call mkdocsBuild and validate urls correctness).","title":"site_url"},{"location":"guide/tasks/","text":"Tasks \u00b6 Init \u00b6 mkdocsInit task generate initial site version into src/doc (or custom location). Note Plugin does not use mkdocs new command for site generation: custom template used with pre-configured plugins and enabled material theme. Task will do nothing if target folder exists and not empty. Dev server \u00b6 mkdocsServe task start live reload server (used during development) on http://127.0.0.1:8000/ . Warning Python process will not be killed after you stop gradle execution (search and kill python process manually). This is a known gradle problem and the only known workaround is to start task without daemon: gradlew mkdocsServe --no-daemon . Another alternative is to start serve command directly: copy console command from task execution log and use it directly. Build \u00b6 mkdocsBuild task will generate (suppose project version is '1.0-SNAPSHOT'): build/mkdocs/ /1.0-SNAPSHOT/ - mkdocs site index.html - redirect to correct site Plugin is configured for multi-version documentation publishing: each version is in it's own folder and special index.html at the root will redirect to the latest version (when published). Everything in build/mkdocs/ is assumed to be published into github pages. Tip As documentation is often updated for already released version, it makes sense to define current version manually (or define it when you need to publish to exact version): mkdocs . publish . docPath = '1.0' Update old documentation \u00b6 When older documentation version needs to be updated switch off redirection index.html generation (so it would not override redirection to the latest version): mkdocs . publish { docPath = '0.9' rootRedirect = false // site root must still redirect to '1.0' (assume it's already published) } Will build: build/mkdocs/ /0.9/ - mkdocs site for old version Publish \u00b6 mkdocsPublish calls mkdocsBuild and publish contents of build/mkdocs/ into git repo (by default, gh-pages branch in current repo). See publication for more details. Custom Mkdocs task \u00b6 If you need to use custom mkdocs command: task doSomething ( type: MkdocsTask ) { command = '--help' } Note Full task package is not required because MkdocsTask is actually a property, regustered by plugin with the full class name in value. :doSomething task call will do: python -m mkdocs --help .","title":"Tasks"},{"location":"guide/tasks/#tasks","text":"","title":"Tasks"},{"location":"guide/tasks/#init","text":"mkdocsInit task generate initial site version into src/doc (or custom location). Note Plugin does not use mkdocs new command for site generation: custom template used with pre-configured plugins and enabled material theme. Task will do nothing if target folder exists and not empty.","title":"Init"},{"location":"guide/tasks/#dev-server","text":"mkdocsServe task start live reload server (used during development) on http://127.0.0.1:8000/ . Warning Python process will not be killed after you stop gradle execution (search and kill python process manually). This is a known gradle problem and the only known workaround is to start task without daemon: gradlew mkdocsServe --no-daemon . Another alternative is to start serve command directly: copy console command from task execution log and use it directly.","title":"Dev server"},{"location":"guide/tasks/#build","text":"mkdocsBuild task will generate (suppose project version is '1.0-SNAPSHOT'): build/mkdocs/ /1.0-SNAPSHOT/ - mkdocs site index.html - redirect to correct site Plugin is configured for multi-version documentation publishing: each version is in it's own folder and special index.html at the root will redirect to the latest version (when published). Everything in build/mkdocs/ is assumed to be published into github pages. Tip As documentation is often updated for already released version, it makes sense to define current version manually (or define it when you need to publish to exact version): mkdocs . publish . docPath = '1.0'","title":"Build"},{"location":"guide/tasks/#update-old-documentation","text":"When older documentation version needs to be updated switch off redirection index.html generation (so it would not override redirection to the latest version): mkdocs . publish { docPath = '0.9' rootRedirect = false // site root must still redirect to '1.0' (assume it's already published) } Will build: build/mkdocs/ /0.9/ - mkdocs site for old version","title":"Update old documentation"},{"location":"guide/tasks/#publish","text":"mkdocsPublish calls mkdocsBuild and publish contents of build/mkdocs/ into git repo (by default, gh-pages branch in current repo). See publication for more details.","title":"Publish"},{"location":"guide/tasks/#custom-mkdocs-task","text":"If you need to use custom mkdocs command: task doSomething ( type: MkdocsTask ) { command = '--help' } Note Full task package is not required because MkdocsTask is actually a property, regustered by plugin with the full class name in value. :doSomething task call will do: python -m mkdocs --help .","title":"Custom Mkdocs task"},{"location":"guide/theme/","text":"Themes \u00b6 By default, plugin assumes material theme usage, but you can use any other theme if you want. Changing theme \u00b6 To apply a new theme you'll need: Add theme package Apply new theme in mkdocs.yml (optional) Remove material-related configurations in mkdocs.yml For example, lets configure ivory theme . First, we need to declare it's package in build.gradle: python . pip 'mkdocs-ivory:0.4.6' Note Additional optional packages may be required for theme (e.g. like for material theme). Just add all required packages: python . pip 'mkdocs-ivory:0.4.6' , 'some-additional-package:1.0' Then changing theme in mkdocs.yml: theme : name : 'ivory' Material-related configurations \u00b6 Default mkdocs.yml ( generated by plugin ) contains special configurations related to material theme, which may be removed (in case of other theme used): theme : name : 'material' # Material theme configuration flag feature : tabs : false #extra: # Material theme palette configurations # palette: # primary: 'indigo' # accent: 'indigo' # Material theme social links configuration # social: # - icon: fontawesome/brands/github # link: https://github.com/you # - icon: fontawesome/brands/twitter # link: https://twitter.com/you # Extensions used by material markdown_extensions : - admonition - codehilite : guess_lang : false - footnotes - meta - def_list - toc : permalink : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.smartsymbols - pymdownx.superfences Note I don't know if markdown_extensions would work with your theme. You can experiment if you need these extra features (see material theme guide for extensions usage examples).","title":"Themes"},{"location":"guide/theme/#themes","text":"By default, plugin assumes material theme usage, but you can use any other theme if you want.","title":"Themes"},{"location":"guide/theme/#changing-theme","text":"To apply a new theme you'll need: Add theme package Apply new theme in mkdocs.yml (optional) Remove material-related configurations in mkdocs.yml For example, lets configure ivory theme . First, we need to declare it's package in build.gradle: python . pip 'mkdocs-ivory:0.4.6' Note Additional optional packages may be required for theme (e.g. like for material theme). Just add all required packages: python . pip 'mkdocs-ivory:0.4.6' , 'some-additional-package:1.0' Then changing theme in mkdocs.yml: theme : name : 'ivory'","title":"Changing theme"},{"location":"guide/theme/#material-related-configurations","text":"Default mkdocs.yml ( generated by plugin ) contains special configurations related to material theme, which may be removed (in case of other theme used): theme : name : 'material' # Material theme configuration flag feature : tabs : false #extra: # Material theme palette configurations # palette: # primary: 'indigo' # accent: 'indigo' # Material theme social links configuration # social: # - icon: fontawesome/brands/github # link: https://github.com/you # - icon: fontawesome/brands/twitter # link: https://twitter.com/you # Extensions used by material markdown_extensions : - admonition - codehilite : guess_lang : false - footnotes - meta - def_list - toc : permalink : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.smartsymbols - pymdownx.superfences Note I don't know if markdown_extensions would work with your theme. You can experiment if you need these extra features (see material theme guide for extensions usage examples).","title":"Material-related configurations"},{"location":"guide/vars/","text":"Variables \u00b6 You can declare variables as: mkdocs { extras = [ 'version' : \"${-> project.version}\" , 'something' : 'something else' ] } Warning You'll have to use lazy evaluation syntax for sensitive properties. In the example above actual version ( \"${-> project.version}\" ) would be resolved only just before mkdocs task execution. As an alternative, you can declare some properties just before task execution: mkdocsBuild . doFirst { extras . prop = ... some value calculation } But this will apply property only for one task (e.g. mkdocsServe will not see this property)! Variables applied with markdownextradata mkdocs plugin. The plugin is installed, but not activated by default. To use variables it must be enabled: plugins : - search - markdownextradata (search plugin is enabled by default when plugins section is not declared and so have to be manually specified) Now you can use variables in markdown files: {{ gradle.version }} and {{ gradle.something }} Note Variables will work for all mkdocs tasks ( MkdocsTask ), including mkdocsServe ! Tip All generated variables are also printed in console (for reference). Keys \u00b6 Plugin will automatically replace ' ' and '-' in variable keys into '_'. For example: mkdocs { extras = [ 'something-else other' : 'something else' ] } Will appear as gradle.something_else_other variable. Automation example \u00b6 Variables addition may be scripted. For example, mkdocs plugin's build use this to store used pip modules versions as vars: afterEvaluate { // iterating over modules declared with python.pip python . modules . each { def mod = it . split ( ':' ) // storing module name as-is: plugin will auto correct '-' to '_' mkdocs . extras [ mod [ 0 ]] = mod [ 1 ] } } And version reference in docs looks like: * [ mkdocs: {{ gradle.mkdocs }} ]( https://pypi.python.org/pypi/mkdocs ) * [ mkdocs-material: {{ gradle.mkdocs_material }} ]( https://pypi.python.org/pypi/mkdocs-material ) afterEvaluate block is not required in this case, but it's usually safer to use it to avoid \"configuration property not yet ready\" errors. Show template syntax in doc \u00b6 If you want to prevent replacing variable, for example: {{ not_var }} Then simply apply text \"as variable\" : {{ '{{ not_var }}' }} or use jinja raw block syntax {% raw %} {{ not_var }} {% endraw %} How it works \u00b6 When variables declared ( mkdocs.extras ), plugin will generate a special data file before mkdocs task execution: [mkdocs.yml location]/docs/_data/gradle.yml Markdownextradata plugin loads all yaml files in _data directory by default and so it would recognize and load gradle-declared properties automatically. After task execution, file is removed (because it located inside sources). You can declare additinoal (not gradle-related) variables directly in mkdocs.yml's extra section or using additinoal _data files: see plugin documentation . Tip To update plugin version (for example, in case of bugs): python . pip 'mkdocs-markdownextradata-plugin:0.2.5' Potential problem on linux \u00b6 Markdownextradata plugin requires PyYaml 5.1 or above. If you use older version, you may face the following error: ... File \"/home/travis/.local/lib/python3.6/site-packages/markdownextradata/plugin.py\", line 90, in on_pre_build if filename.suffix in [\".yml\", \".yaml\"] AttributeError: module 'yaml' has no attribute 'FullLoader' To workaround it either upgrade global PyYaml: pip3 install --ignore-installed pyyaml ( --ignore-installed required!) Or specify exact pyyaml version for installation inside environment: python . pip 'pyyaml:5.4.1' Note PyYaml module not declared by default because it's a system module, installed with python. It may require additional packages for installation ( python3-dev ) and so it could cause more problems if it would be updated by default. But, this problem affects only old python versions, and you may never face this. Travis ci \u00b6 Pyyaml problem might be faced on travis: even bionic shipped with python 3.6 brings old pyyaml version. Workaround: language : java dist : bionic addons : apt : packages : - \"python3\" - \"python3-pip\" - \"python3-setuptools\" matrix : include : - jdk : openjdk8 - jdk : openjdk11 before_install : - chmod +x gradlew - pip3 install --upgrade pip # markdownextradata plugin requires at least pyyaml 5.1 - pip3 install --ignore-installed pyyaml","title":"Variables"},{"location":"guide/vars/#variables","text":"You can declare variables as: mkdocs { extras = [ 'version' : \"${-> project.version}\" , 'something' : 'something else' ] } Warning You'll have to use lazy evaluation syntax for sensitive properties. In the example above actual version ( \"${-> project.version}\" ) would be resolved only just before mkdocs task execution. As an alternative, you can declare some properties just before task execution: mkdocsBuild . doFirst { extras . prop = ... some value calculation } But this will apply property only for one task (e.g. mkdocsServe will not see this property)! Variables applied with markdownextradata mkdocs plugin. The plugin is installed, but not activated by default. To use variables it must be enabled: plugins : - search - markdownextradata (search plugin is enabled by default when plugins section is not declared and so have to be manually specified) Now you can use variables in markdown files: {{ gradle.version }} and {{ gradle.something }} Note Variables will work for all mkdocs tasks ( MkdocsTask ), including mkdocsServe ! Tip All generated variables are also printed in console (for reference).","title":"Variables"},{"location":"guide/vars/#keys","text":"Plugin will automatically replace ' ' and '-' in variable keys into '_'. For example: mkdocs { extras = [ 'something-else other' : 'something else' ] } Will appear as gradle.something_else_other variable.","title":"Keys"},{"location":"guide/vars/#automation-example","text":"Variables addition may be scripted. For example, mkdocs plugin's build use this to store used pip modules versions as vars: afterEvaluate { // iterating over modules declared with python.pip python . modules . each { def mod = it . split ( ':' ) // storing module name as-is: plugin will auto correct '-' to '_' mkdocs . extras [ mod [ 0 ]] = mod [ 1 ] } } And version reference in docs looks like: * [ mkdocs: {{ gradle.mkdocs }} ]( https://pypi.python.org/pypi/mkdocs ) * [ mkdocs-material: {{ gradle.mkdocs_material }} ]( https://pypi.python.org/pypi/mkdocs-material ) afterEvaluate block is not required in this case, but it's usually safer to use it to avoid \"configuration property not yet ready\" errors.","title":"Automation example"},{"location":"guide/vars/#show-template-syntax-in-doc","text":"If you want to prevent replacing variable, for example: {{ not_var }} Then simply apply text \"as variable\" : {{ '{{ not_var }}' }} or use jinja raw block syntax {% raw %} {{ not_var }} {% endraw %}","title":"Show template syntax in doc"},{"location":"guide/vars/#how-it-works","text":"When variables declared ( mkdocs.extras ), plugin will generate a special data file before mkdocs task execution: [mkdocs.yml location]/docs/_data/gradle.yml Markdownextradata plugin loads all yaml files in _data directory by default and so it would recognize and load gradle-declared properties automatically. After task execution, file is removed (because it located inside sources). You can declare additinoal (not gradle-related) variables directly in mkdocs.yml's extra section or using additinoal _data files: see plugin documentation . Tip To update plugin version (for example, in case of bugs): python . pip 'mkdocs-markdownextradata-plugin:0.2.5'","title":"How it works"},{"location":"guide/vars/#potential-problem-on-linux","text":"Markdownextradata plugin requires PyYaml 5.1 or above. If you use older version, you may face the following error: ... File \"/home/travis/.local/lib/python3.6/site-packages/markdownextradata/plugin.py\", line 90, in on_pre_build if filename.suffix in [\".yml\", \".yaml\"] AttributeError: module 'yaml' has no attribute 'FullLoader' To workaround it either upgrade global PyYaml: pip3 install --ignore-installed pyyaml ( --ignore-installed required!) Or specify exact pyyaml version for installation inside environment: python . pip 'pyyaml:5.4.1' Note PyYaml module not declared by default because it's a system module, installed with python. It may require additional packages for installation ( python3-dev ) and so it could cause more problems if it would be updated by default. But, this problem affects only old python versions, and you may never face this.","title":"Potential problem on linux"},{"location":"guide/vars/#travis-ci","text":"Pyyaml problem might be faced on travis: even bionic shipped with python 3.6 brings old pyyaml version. Workaround: language : java dist : bionic addons : apt : packages : - \"python3\" - \"python3-pip\" - \"python3-setuptools\" matrix : include : - jdk : openjdk8 - jdk : openjdk11 before_install : - chmod +x gradlew - pip3 install --upgrade pip # markdownextradata plugin requires at least pyyaml 5.1 - pip3 install --ignore-installed pyyaml","title":"Travis ci"}]}